{:tasks
 {test:clj {:doc "Run jvm tests, optionally specify clj-version (ex. :clj-1.10 :clj-1.11(default) or :clj-all)"
            :requires ([clojure.string :as str]
                       [clojure.edn :as edn])
            :task (let [args *command-line-args*
                        farg (first *command-line-args*)
                        ;; allow for missing leading colon
                        farg (if (and farg (str/starts-with? farg "clj-"))
                               (str ":" farg)
                               farg)
                        clj-version-aliases (->> "deps.edn"
                                                 slurp
                                                 edn/read-string
                                                 :aliases
                                                 keys
                                                 (map str)
                                                 (filter (fn [a] (-> a name (str/starts-with?  ":clj-"))))
                                                 sort
                                                 (into []))
                        [aliases args] (cond
                                         (nil? farg) [[":clj-1.11"] []]

                                         (= ":clj-all" farg) [clj-version-aliases (rest args)]

                                         (and (str/starts-with? farg ":clj-")
                                              (not (some #{farg} clj-version-aliases)))
                                         (throw (ex-info (format "%s not recognized, valid clj- args are: %s or \":clj-all\"" farg clj-version-aliases) {}))

                                         (some #{farg} clj-version-aliases) [[farg] (rest args)]

                                         :else [[":clj-1.11"] args])]
                    (doseq [alias aliases]
                      (do
                        (println (format "-[Running jvm tests for %s]-" alias))
                        (apply clojure (str "-M:test" alias) args))))}

  test:bb {:extra-paths ["src" "test"]
           :extra-deps {io.github.cognitect-labs/test-runner
                        {:git/tag "v0.5.0" :git/sha "b3fd0d2"}
                        io.github.borkdude/deflet {:mvn/version "0.1.0"}}
           :task cognitect.test-runner/-main}

  quickdoc {:doc "Invoke quickdoc"
            :extra-deps {io.github.borkdude/quickdoc
                         {:git/sha "e4f08eb5b1882cf0bffcbb7370699c0a63c9fd72"}}
            :task (exec 'quickdoc.api/quickdoc)
            :exec-args {:git/branch "main"
                        :github/repo "https://github.com/babashka/http-client"
                        :source-paths ["src/babashka/http_client.clj"
                                       "src/babashka/http_client/interceptors.clj"
                                       "src/babashka/http_client/websocket.clj"]}}
  refresh-version {:requires ([babashka.fs :as fs]
                              [clojure.string :as str])
                   :task (let [version (-> (slurp "deps.edn")
                                           clojure.edn/read-string
                                           :aliases :neil :project :version)]
                           (fs/update-file "src/babashka/http_client/internal/version.clj"
                                           (fn [contents]
                                             (str/replace contents (re-pattern "#_:version(.*)")
                                                          (fn [[_ match]]
                                                            (str "#_:version " (pr-str version)))))))}

  publish {:depends [refresh-version]
           :task (clojure "-T:build deploy")}}}
